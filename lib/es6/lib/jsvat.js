import{australia,brazil,norway}from"./countries";function makeResult(t,e,r){return{value:t||void 0,isValid:Boolean(e),isValidFormat:!!r&&isVatValidToRegexp(t,r.rules.regex).isValid,isSupportedCountry:Boolean(r),country:r?{name:r.name,isoCode:{short:r.codes[0],long:r.codes[1],numeric:r.codes[2]}}:void 0}}function removeExtraChars(t=""){return t.toString().toUpperCase().replace(/(\s|-|\.|\/)+/g,"")}function getCountryCodes(t){return[...t.codes,"Greece"===t.name?"EL":void 0].filter(Boolean)}const countriesVATDoesNotStartWithCountryCode=[australia.name,brazil.name,norway.name];function isVATStartWithCountryCode(t){return!countriesVATDoesNotStartWithCountryCode.includes(t)}function isVATStartWithNumber(t){return!!t.match(/^\d{2}/)}function getCountry(t,e){for(const r of e)if(startsWithCode(t,r)||!isVATStartWithCountryCode(r.name)&&isVATStartWithNumber(t))return{...r}}function startsWithCode(e,t){return 0<getCountryCodes(t).filter(t=>e.startsWith(t)).length}function isVatValidToRegexp(t,e){for(const r of e)if(r.test(t))return{isValid:!0,regex:r};return{isValid:!1,regex:void 0}}function isVatValid(t,e){var r=isVatValidToRegexp(t,e.rules.regex);return!(!r.isValid||!r.regex||!(r=r.regex.exec(t)))&&e.calcFn(r[2])}function checkVAT(t,e=[]){var r;return t?makeResult(r=removeExtraChars(t),!!(e=getCountry(r,e))&&isVatValid(r,e),e):makeResult(t,!1)}export{checkVAT};